---
import Layout from '@layouts/Layout.astro';
import * as es from '@i18n/es.json';
import * as en from '@i18n/en.json';
import Hero from '@components/Hero.astro';
import TechCard from '@components/TechCard.astro';
import Project from '@components/Project.astro';
import AboutMe from '@components/AboutMe.astro';

export function getStaticPaths() {
  return [{ params: { lang: 'es' } }, { params: { lang: 'en' } }];
}

const { lang } = Astro.params;
const t = lang === 'es' ? es : en;

let technologies = null;

if (lang === 'es') {
  technologies = {
    Frontend: ['Astro', 'Svelte', 'Tailwind CSS', 'JavaScript'],
    Backend: ['TypeScript', 'Java', 'Node JS', 'MySQL', 'PostgreSQL'],
    Otros: ['Python', 'Java', 'Kotlin', 'PHP']
  };
} else {
  technologies = {
    Frontend: ['Astro', 'Svelte', 'Tailwind CSS', 'JavaScript'],
    Backend: ['TypeScript', 'Java', 'Node JS', 'MySQL', 'PostgreSQL'],
    Others: ['Python', 'Java', 'Kotlin', 'PHP']
  };
}

const projects = [
  {
    title: 'DiniBoard',
    desc: t.PROJECTS.LIST[0].DESCRIPTION,
    img: '/project_1.avif',
    techs: ['Svelte', 'TypeScript', 'Tailwind CSS', 'Supabase'],
    github: 'https://github.com/K4zura/personal-dashboard',
    website: 'https://personal-dashboard-murex.vercel.app'
  },
  {
    title: 'Web Page University',
    desc: 'Trabajo de universidad presentado para proyecto final de Web I en el cual se repaso todo lo basico de HTML y CSS para el desarrollo de la web.',
    img: '/project_2.avif',
    techs: ['HTML', 'CSS', 'JavaScript'],
    github: 'https://github.com/K4zura/web-I-page',
    website: 'https://k4zura.github.io/web-I-page/'
  },
  {
    title: 'Facial Recognition',
    desc: 'Proyecto realizado en el que se implemento un reconocimiento facial para la identificacion de estudiantes que se registran en la misma web simulando la base de datos de la universidad, se presento como proyecto en las EAFI(Concurso realizado por la misma universidad) y termino entre los mejores proyectos.',
    img: '/project_3.avif',
    techs: ['React', 'Tailwind CSS', 'TypeScript', 'JavaScript'],
    github: 'https://github.com/K4zura/facial-recognition',
    website: 'https://facial-recognition-nu.vercel.app/'
  },
  {
    title: 'Portfolio NextJS',
    desc: 'Portfolio Creado con NextJS actualmente en desarrollo.',
    img: '/project_4.avif',
    techs: ['NextJS', 'CSS', 'JavaScript'],
    github: 'https://github.com/K4zura/portfolio-nextjs',
    website: 'https://portfolio-nextjs-five-inky.vercel.app/'
  }
];
---

<Layout title={t.PAGE_TITLE}>
  <Hero t={t.HERO} />
  <section
    id="technologies"
    class="scroll-section min-h-screen py-16 grid grid-cols-3 w-3/5 content-center place-items-center"
  >
    {
      Object.entries(technologies).map(([category, techs]) => (
        <div class="flex flex-col items-center md:items-start">
          <h3 class="font-semibold text-2xl mb-3">{category}</h3>
          <ul class="flex flex-col gap-3">
            {techs.map((tech) => (
              <TechCard title={tech} />
            ))}
          </ul>
        </div>
      ))
    }
  </section>
  <section
    id="projects"
    class="scroll-section min-h-screen py-16 flex flex-col items-center justify-center gap-5"
  >
    <h2 class="font-bold text-2xl uppercase">{t.PROJECTS.TITLE}</h2>
    <div class="w-3/4 grid grid-cols-1 lg:grid-cols-2 gap-x-6 gap-y-8">
      {
        projects.map((project) => (
          <Project
            title={project.title}
            desc={project.desc}
            img={project.img}
            techs={project.techs}
            github={project.github}
            website={project.website}
          />
        ))
      }
    </div>
  </section>
  <section id="about-me" class="scroll-section min-h-screen py-16">
    <AboutMe t={t} />
  </section>
</Layout>

<script lang="ts">
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('.scroll-section');

    document.getElementById('theme-toggle')?.addEventListener('click', () => {
      const isDark = document.documentElement.classList.toggle('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });

    navLinks.forEach((link) => {
      link.addEventListener('click', () => {
        navLinks.forEach((navLink) => navLink.classList.remove('active'));
        link.classList.add('active');
      });
    });

    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.6
    };

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const currentSectionId = entry.target.id;
          navLinks.forEach((link) => {
            link.classList.toggle(
              'active',
              link.dataset.navLink === currentSectionId
            );
          });
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions
    );
    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('.scroll-section');
    // --- NUEVO CÃ“DIGO PARA CONTROLAR EL SCROLL ---
    let isScrolling = false;
    const cooldown = 500; // 1 segundo de espera entre scrolls

    const handleWheel = (event: WheelEvent) => {
      if (isScrolling) {
        event.preventDefault();
        return;
      }

      if (Math.abs(event.deltaY) > 1) {
        event.preventDefault();

        const container = document.documentElement.scrollTop
          ? document.documentElement
          : document.body;
        const currentScrollTop = container.scrollTop;
        const sectionHeight = window.innerHeight;

        const currentSectionIndex = Math.round(
          currentScrollTop / sectionHeight
        );
        let targetSectionIndex;

        if (event.deltaY > 0) {
          targetSectionIndex = currentSectionIndex + 1;
        } else {
          targetSectionIndex = currentSectionIndex - 1;
        }

        if (targetSectionIndex >= 0 && targetSectionIndex < sections.length) {
          sections[targetSectionIndex].scrollIntoView({ behavior: 'smooth' });

          isScrolling = true;
          setTimeout(() => {
            isScrolling = false;
          }, cooldown);
        }
      }
    };

    document.body.addEventListener('wheel', handleWheel, { passive: false });
  });
</script>
